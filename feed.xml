<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://blog.wells.tw/</id><title>wells's blog</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-12-21T17:53:36+08:00</updated> <author> <name>張哲瑋</name> <uri>https://blog.wells.tw/</uri> </author><link rel="self" type="application/atom+xml" href="https://blog.wells.tw/feed.xml"/><link rel="alternate" type="text/html" hreflang="Zh-TW" href="https://blog.wells.tw/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 張哲瑋 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>解決 Github Deploy Key is already in use 問題</title><link href="https://blog.wells.tw/posts/%E8%A7%A3%E6%B1%BA-github-deploy-key-%E5%95%8F%E9%A1%8C/" rel="alternate" type="text/html" title="解決 Github Deploy Key is already in use 問題" /><published>2021-08-04T00:00:00+08:00</published> <updated>2021-08-04T00:00:00+08:00</updated> <id>https://blog.wells.tw/posts/%E8%A7%A3%E6%B1%BA-github-deploy-key-%E5%95%8F%E9%A1%8C/</id> <content src="https://blog.wells.tw/posts/%E8%A7%A3%E6%B1%BA-github-deploy-key-%E5%95%8F%E9%A1%8C/" /> <author> <name>張哲瑋</name> </author> <category term="Note" /> <summary> 我是wells，擔任過室內配線的國手，征服了電氣領域後，現在正跨大版圖到資訊界。 簡介 由於最近 Github 開始限制使用 Password(HTTPS) 進行 Push 的行為，因此之後盡量都改使用 SSH 的方式進行 Push，但是之前在設定 Deploy Keys 遇到了以下的錯誤： 簡單來說是因為這個帳號已經有其他 Repository 使用該金鑰，但一個帳號少說也有 10 個 Repository，每一個 Repository 都去查未免也太沒有效率，於是記錄一下使用該金鑰找出對應的 Repository。 尋找對應的 Repository 使用方式： ssh -T -ai ~/.ssh/your_ssh_key git@github.com 範例 例如我希望使用 ~/.ssh/test 這個金鑰進行 Push，但是遇到了前面的問題，於是我可以執行： ssh ... </summary> </entry> <entry><title>Rails Deploy 筆記</title><link href="https://blog.wells.tw/posts/rails-deploy%E7%AD%86%E8%A8%98/" rel="alternate" type="text/html" title="Rails Deploy 筆記" /><published>2021-07-28T00:00:00+08:00</published> <updated>2021-08-04T11:27:57+08:00</updated> <id>https://blog.wells.tw/posts/rails-deploy%E7%AD%86%E8%A8%98/</id> <content src="https://blog.wells.tw/posts/rails-deploy%E7%AD%86%E8%A8%98/" /> <author> <name>張哲瑋</name> </author> <category term="Note" /> <summary> 我是wells，擔任過室內配線的國手，征服了電氣領域後，現在正跨大版圖到資訊界。 簡介 近期 GCP 的免費額度快沒了，身為一位免費仔我決定再開一個帳號進行移機動作，但每次移機都會發現一些詭異的事情導致浪費一整天，故寫下這個筆記希望以後移機可以快一點。 設定流程 簡介 設定流程 開始設定 設定 SSH 安裝 RVM 安裝 Ruby on Rails 安裝 NVM 安裝 Nodejs 和 Yarn 安裝 Database MySQL PostgreSQL 安裝 Passenger + Nginx 確認安裝成功 ... </summary> </entry> <entry><title>Rails 搭配 Omniauth line</title><link href="https://blog.wells.tw/posts/rails-%E6%90%AD%E9%85%8D-omniauth-line/" rel="alternate" type="text/html" title="Rails 搭配 Omniauth line" /><published>2021-07-21T09:00:00+08:00</published> <updated>2021-08-04T11:27:57+08:00</updated> <id>https://blog.wells.tw/posts/rails-%E6%90%AD%E9%85%8D-omniauth-line/</id> <content src="https://blog.wells.tw/posts/rails-%E6%90%AD%E9%85%8D-omniauth-line/" /> <author> <name>張哲瑋</name> </author> <category term="Note" /> <summary> 我是wells，擔任過室內配線的國手，征服了電氣領域後，現在正跨大版圖到資訊界。 本篇內容 前置作業 安裝相關套件 生成 User Model 設定 Line Login 新增身份驗證 實作登入登出 前置作業 1. 建立新檔案 使用 Rails 指令新增專案： rails new demo cd demo 2. 產生空白頁 使用 Rails 指令新增 Controller： rails g controller home 之後新增 app/views/home/index.html.erb。 最後在 config/routes.rb 中新增以下內容： root to: "home#index" 安裝相關套件 在 Gemfile 中加入以下內容： gem 'devise' gem 'omniauth-line', git: 'https://g... </summary> </entry> <entry><title>Rails 實作儲存型 XSS</title><link href="https://blog.wells.tw/posts/rails-%E5%AF%A6%E4%BD%9C%E5%84%B2%E5%AD%98%E5%9E%8BXSS/" rel="alternate" type="text/html" title="Rails 實作儲存型 XSS" /><published>2021-07-20T09:00:00+08:00</published> <updated>2021-08-04T11:27:57+08:00</updated> <id>https://blog.wells.tw/posts/rails-%E5%AF%A6%E4%BD%9C%E5%84%B2%E5%AD%98%E5%9E%8BXSS/</id> <content src="https://blog.wells.tw/posts/rails-%E5%AF%A6%E4%BD%9C%E5%84%B2%E5%AD%98%E5%9E%8BXSS/" /> <author> <name>張哲瑋</name> </author> <category term="Note" /> <summary> 我是wells，擔任過室內配線的國手，征服了電氣領域後，現在正跨大版圖到資訊界。 本篇內容 介紹 防範機制 挖坑給自己跳 介紹 儲存型 XSS 是利用動態網站經常從資料庫撈出資料後產生 HTML 的特性進行駭入，最常見的就是有貼文功能的網站，原本該呈現正常的貼文，但惡意人士將 JavaScript 寫入貼文中，導致其他用戶在觀看其貼文時瀏覽器直接執行該段內容裡的 JavaScript。 防範機制 儲存型 XSS 的駭入程序大致如下： 儲存惡意程式碼進資料庫 網站以資料庫的資料產生 HTML 傳給用戶 用戶的瀏覽器解析 HTML 並執行惡意程式碼 依照上方流程最常見的防護手段在第二步，在 Rails 內建中，會自動將 HTML 裡的特殊字符進行轉義，例如以下變化： 原始字元 轉義處理後 ... </summary> </entry> <entry><title>Rails 實作 SQL Injection</title><link href="https://blog.wells.tw/posts/rails-%E5%AF%A6%E4%BD%9Csql-injection/" rel="alternate" type="text/html" title="Rails 實作 SQL Injection" /><published>2021-07-19T09:00:00+08:00</published> <updated>2021-08-04T11:27:57+08:00</updated> <id>https://blog.wells.tw/posts/rails-%E5%AF%A6%E4%BD%9Csql-injection/</id> <content src="https://blog.wells.tw/posts/rails-%E5%AF%A6%E4%BD%9Csql-injection/" /> <author> <name>張哲瑋</name> </author> <category term="Note" /> <summary> 我是wells，擔任過室內配線的國手，征服了電氣領域後，現在正跨大版圖到資訊界。 本篇內容 介紹 入侵實作 修補方式 介紹 SQL(結構化查詢語言)用於管理資料庫，由於其無法區分值和控制指令， 因此惡意人士可以藉由在值中安插控制指令從而對資料庫進行惡意操作，這種操作稱為 SQL Injection。 入侵實作 本範例使用 Ruby on Rails 6 進行實作。 1. 建立新檔案 使用 Rails 指令新增專案： rails new demo cd demo 2. 更改資料庫為 PostgreSQL 更改 Gemfile 中的內容： - gem 'sqlite3', '~&amp;gt; 1.4' + gem 'pg' 複製以下內容，取代 config/database.yml ： default: &amp;amp;default adapter: postgre... </summary> </entry> </feed>
